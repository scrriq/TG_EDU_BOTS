import telebot as tb
from telebot import types
import random
import json
import os

token = open("token.txt").readline().strip()
bot = tb.TeleBot(token)

EMOJI = {'–∫–∞–º–µ–Ω—å': 'üóø', '–±—É–º–∞–≥–∞': 'üìÑ', '–Ω–æ–∂–Ω–∏—Ü—ã': '‚úÇÔ∏è'}
RESULTS_TEXT = {
    'win': "–ü–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏! \nüéâ –ù–∞–ø–æ–ª–Ω—è–π—Ç–µ –±–æ–∫–∞–ª—ã!",
    'draw': "–ù–∏—á—å—è! \nüîÑ –î–∞–≤–∞–π—Ç–µ —Ä–µ–≤–∞–Ω—à?",
    'loss': "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏... \nüí§ –£–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ"
}
STATS_FILE = 'stats.json'

def load_stats():
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_stats(stats):
    with open(STATS_FILE, 'w') as f:
        json.dump(stats, f, indent=2)

def update_stats(user_id, result):
    stats = load_stats()
    user_id = str(user_id)
    user_stats = stats.get(user_id, {'wins': 0, 'losses': 0, 'draws': 0})
    
    if result == 'win':
        user_stats['wins'] += 1
    elif result == 'loss':
        user_stats['losses'] += 1
    elif result == 'draw':
        user_stats['draws'] += 1
    
    stats[user_id] = user_stats
    save_stats(stats)
    return user_stats

def get_stats(user_id):
    stats = load_stats()
    return stats.get(str(user_id), {'wins': 0, 'losses': 0, 'draws': 0})

def reset_stats(user_id):
    stats = load_stats()
    user_id = str(user_id)
    if user_id in stats:
        del stats[user_id]
        save_stats(stats)
    return {'wins': 0, 'losses': 0, 'draws': 0}

def determine_winner(user_choice, bot_choice):
    if user_choice == bot_choice:
        return 'draw'
    wins = [('–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã'), ('–±—É–º–∞–≥–∞', '–∫–∞–º–µ–Ω—å'), ('–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞')]
    return 'win' if (user_choice, bot_choice) in wins else 'loss'

def game_keyboard():
    markup = types.InlineKeyboardMarkup(row_width=3)
    buttons = [
        types.InlineKeyboardButton(f"–ö–∞–º–µ–Ω—å {EMOJI['–∫–∞–º–µ–Ω—å']}", callback_data='–∫–∞–º–µ–Ω—å'),
        types.InlineKeyboardButton(f"–ë—É–º–∞–≥–∞ {EMOJI['–±—É–º–∞–≥–∞']}", callback_data='–±—É–º–∞–≥–∞'),
        types.InlineKeyboardButton(f"–ù–æ–∂–Ω–∏—Ü—ã {EMOJI['–Ω–æ–∂–Ω–∏—Ü—ã']}", callback_data='–Ω–æ–∂–Ω–∏—Ü—ã')
    ]
    markup.add(*buttons)
    return markup

def after_game_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üîÑ –°—ã–≥—Ä–∞—Ç—å –µ—â—ë", callback_data='play_again'),
        types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='show_stats')
    )
    return markup

def stats_keyboard():
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data='play_again'),
        types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='reset_stats')
    )
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å"), types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'))
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —Å—Ç—Ä–∞—Ç–µ–≥!\n"
        "–Ø –±–æ—Ç –¥–ª—è —ç–ø–∏—á–Ω—ã—Ö –±–∞—Ç–∞–ª–∏–π –≤ *–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞!*\n\n"
        "‚ñ™Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π /play –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–∏—Ç–≤—ã\n"
        "‚ñ™Ô∏è /stats —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        reply_markup=markup,
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['play'])
def play_cmd(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –æ—Ä—É–∂–∏–µ:", reply_markup=game_keyboard())

@bot.message_handler(commands=['stats'])
def stats_cmd(message):
    show_stats(message.chat.id)

def show_stats(chat_id, message_id=None):
    stats = get_stats(chat_id)
    text = (
        "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üèÜ –ü–æ–±–µ–¥: `{stats['wins']}`\n"
        f"üí• –ü–æ—Ä–∞–∂–µ–Ω–∏–π: `{stats['losses']}`\n"
        f"ü§ù –ù–∏—á—å–∏—Ö: `{stats['draws']}`\n\n"
        "_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã_"
    )
    
    if message_id:
        bot.edit_message_text(
            text,
            chat_id,
            message_id,
            reply_markup=stats_keyboard(),
            parse_mode='Markdown'
        )
    else:
        bot.send_message(
            chat_id, 
            text, 
            reply_markup=stats_keyboard(), 
            parse_mode='Markdown'
        )

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == 'üéÆ –ò–≥—Ä–∞—Ç—å':
        play_cmd(message)
    elif message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_stats(message.chat.id)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data in ['–∫–∞–º–µ–Ω—å', '–±—É–º–∞–≥–∞', '–Ω–æ–∂–Ω–∏—Ü—ã']:
        handle_game_choice(call)
    elif call.data == 'play_again':
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –æ—Ä—É–∂–∏–µ:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=game_keyboard()
        )
    elif call.data == 'show_stats':
        show_stats(call.message.chat.id, call.message.message_id)
    elif call.data == 'reset_stats':
        reset_stats(call.message.chat.id)
        bot.answer_callback_query(
            call.id,
            text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!",
            show_alert=True
        )
        show_stats(call.message.chat.id, call.message.message_id)

def handle_game_choice(call):
    user_choice = call.data
    bot_choice = random.choice(list(EMOJI.keys()))
    
    result = determine_winner(user_choice, bot_choice)
    update_stats(call.message.chat.id, result)
    
    result_message = (
        f"–í–∞—à –≤—ã–±–æ—Ä: {user_choice} {EMOJI[user_choice]}\n"
        f"–ú–æ–π –≤—ã–±–æ—Ä: {bot_choice} {EMOJI[bot_choice]}\n\n"
        f"**{RESULTS_TEXT[result]}**"
    )
    
    bot.edit_message_text(
        result_message,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=after_game_keyboard(),
        parse_mode='Markdown'
    )

if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –±–∏—Ç–≤–∞–º! ‚öîÔ∏è')
    bot.infinity_polling()